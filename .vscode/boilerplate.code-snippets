{
	"print log": {
		"prefix": "clog",
		"body": [
			"console.log($1);",
		]
	},
	"try catch": {
		"prefix": "tryc",
		"body": [
			"try",
			"{",
			"$1",
			"}",
			"catch(e) { }"
		]
	},
	"store Module": {
		"prefix": "reducer",
		"body": [
			"import { Reducer } from \"redux\";",
			"",
			"export class ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}State",
			"{",
			"",
			"}",
			"",
			"export type $1Action =",
			"\t{ type: \"XYZ\" }",
			"",
			"export const $1Reducer:Reducer<$1State,$1Action> = (state: $1State = new $1State(), action: $1Action) =>",
			"{",
			"\tswitch (action.type)",
			"\t{",
			"\t\tdefault:",
			"\t\treturn state;",
			"\t}",
			"}"
		]
	},
	"instance of class": {
		"prefix": "class",
		"body": [
			"class ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}",
			"{",
			"$2",
			"}",
			"",
			"export default $1;"
		],
	},
	"instance of interface": {
		"prefix": "interface",
		"body": [
			"interface ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}",
			"{",
			"$2",
			"}",
			"",
			"export default $1;"
		],
	},
	"instance of enum": {
		"prefix": "enum",
		"body": [
			"enum ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}",
			"{",
			"$2",
			"}",
			"",
			"export default $1;"
		],
	},
	"static readonly": {
		"prefix": "sr",
		"body": "static readonly $1 = \"$1\";"
	},
	"router": {
		"prefix": "router",
		"body": [
			"import express, { NextFunction, Request, Response, Router } from \"express\";",
			"",
			"class ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}} {",
			"\trouter: Router;",
			"\tconstructor() {",
			"\t\tthis.router = express.Router();",
			"\t\tthis.router.get(\"/\", this.get$1);",
			"\t}",
			"",
			"\tget$1 = (req: Request, res: Response, next: NextFunction) => {",
			"\t\tres.status(200).send(\"You reached get $1 function\");",
			"\t}",
			"}",
			"",
			"export default $1;",
		]
	},
	"middleware": {
		"prefix": "middleware",
		"body": [
			"import { NextFunction, Request, Response } from 'express';",
			"",
			"const ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}} = () => {",
			"\treturn (req: Request, res: Response, next: NextFunction) => {",
			"\t\tconsole.log(`${req.method} ${req.path}`);",
			"\t\tnext();",
			"\t}",
			"}",
			"",
			"export default $1;"
		]
	},
	"express request": {
		"prefix": "request",
		"body": [
			"$1 = (req: Request, res: Response, next: NextFunction) => {",
			"\t$2",
			"}"
		]
	},
}